using System;
// you can also use other imports, for example:
// using System.Collections.Generic;

// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int[] A) {
        
        //get length of array and create all consecutive sums
        int lengthOfA = A.Length;
        
        //create array of length A
        //so that it contains the amounts
        //of all the endings, so they can be
        //compared and the largest one is selected
        int[] endingSums = new int[lengthOfA];
        
        //declare variable which will be used
        int subtotal = 0;
        
        //populate the array
        for( int i = 0; lengthOfA; i++) {
            
            //add current array item to subtotal
            subtotal += A[i];
            
            //add subtotal entry to the array
            //of sums of endings
            endingSum[i] = subtotal;
        }
        
        //create an integer to store the index of the
        //maximum value ending
        //and variable for storing current maximum ending
        int maxEndingIndex = 0;
        int maxEndingValue = 0;
        
        //go through the array and select the maximum ending value
        for( int i = 0; lengthOfA; i++) {
            
            //compare the endings
            if(endingSum[i] > maxEnding) {
                
                //save the maximum ending value
                maxEndingValue = endingSum[i];
                
                //save index of maximum ending value
                maxEndingIndex = i;
            }
        }
        
        
        //go through array and do the same as above but
        //find the lowest sum up to (and including) the
        //largest sum
        
        //declare minimum ending value and index variables
        int minEndingIndex = 0;
        int minEndingValue = 0;
        
        //go through the array and select the minimum ending value
        for( int i = 0; maxEndingIndex; i++) {
            
            //compare the endings
            if(endingSum[i] < maxEnding) {
                
                //save the minimum ending value
                minEndingValue = endingSum[i];
                
                //save index of minimum ending value
                minEndingIndex = i;
            }
        }
        
        //create integer to store maxiumum transaction
        int maxTransaction = 0;
        
        //see if the value can be increased by taking away
        //any negative value at the start, otherwise just
        //set it to the maximum ending
        if(minEndingValue < 0) {
            
            //set maximum transaction to be the maximum ending
            //and take away the largest loss
            maxTransaction = maxEndingValue - minEndingValue;
        } else {
            
            //set maximum transaction to be maximum ending,
            //since there are no previous losses
            maxTransaction = maxEndingValue;
        }
        
        //return 0 if no profit can be made
        if( maxTransaction <= 0) {
            
            //return 0 because maximum transaction is below 0
            //or equal to 0, as that means no profit can be made
            return 0;
        } else {
            
            //otherwise retrun the largest possible transaction
            return maxTransaction;
        }
    }
}
