

using System;

class Solution {
    public int[] solution(int N, int[] P, int[] Q) {
        
        int ranges = P.Length;
        int semiprimesSoFar = 0;
        int[] semiprimesUpToHere = new int[N + 1];
        
        // lowest prime factor that aren't itself or 1
        int[] firstFactor = new int[N + 1];
        
        int[] semiprimesInRange = new int[ranges];
        
        
        // mark semiprimes
        for(int i = 2; i < (N + 2) / 2; i++) {
            if(firstFactor[i] == 0) {
                for(int j = i * 2; j <= N; j += i) {
                    if(firstFactor[j] == 0) {
                        if(j == i * i) {
                            firstFactor[j] = -1;
                        } else {
                            firstFactor[j] = i;
                        }
                    } else if(firstFactor[j] * i == j) {
                        firstFactor[j] = -1;
                    }
                }
            }
        }
        
        for(int i = 0; i <= N; i++) {
            if(firstFactor[i] == -1) {
                semiprimesSoFar++;
            }
            
            semiprimesUpToHere[i] = semiprimesSoFar;
        }
        
        for(int k = 0; k < ranges; k++) {
            semiprimesInRange[k] = semiprimesUpToHere[Q[k]] - semiprimesUpToHere[P[k] - 1];
        }
        
        return semiprimesInRange;
    }
}
