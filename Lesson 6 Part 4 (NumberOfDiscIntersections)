using System;

class Solution {
    public int solution(int[] A) {
        int len = A.Length;
        int max = 0;
        int accum = 0;
        int extra = 0;
        int intersections = 0;
        
        //find range of starts
        for (int i = 0; i < len; i++)
        {
            if (A[i] > max)
            {
                max = A[i];
            }
        }
        
        //create array to contain all beginnings
        int[] starts = new int [max + len];
        int[] count = new int [max + len + len + 1];
        
        for (int i = 0; i < len; i++)
        {
            starts[A[i]-i+1+len]++;
        }
        
        //create accumulator for starts
        int range = count.Length;
        for (int i = 0; i < (len+max); i++)
        {
            accum += starts[i];
            count[i] = accum;
            if (starts[i] < 2)
            {
                int x = 1;
                for (int n = 0; n < starts[i]; n++)
                {
                    extra += x;
                    x++;
                }
            }
        }
        
        for (int i = 0; i < len; i++)
        {
            intersections += 
            (count[A[i]+i] - count[A[i]-i]);
        }
        
        intersections -= extra;
        
        if (intersections > 10000000)
        {
            return -1;
        }
        
        return intersections;
    }
}
