using System;

class Solution {
    public int solution(int[] A) {
        //declare all variables
        int len = A.Length;
        int max = 0;
        int accum = 0;
        int extra = 0;
        int intersections = 0;
        
        //find range of starts
        //max is the highest number in A
        for (int i = 0; i < len; i++)
        {
            if (A[i] > max)
            {
                max = A[i];
            }
        }
        
        //create array to contain all beginnings
        int[] starts = new int [max + len];
        int[] count = new int [max + len + len];
        
        for (int i = 0; i < len; i++)
        {
            //Console.WriteLine(i - A[i]);
            starts[(len + i - A[i] - 1)]++;
        }
        
        //create accumulator for starts
        int range = count.Length;
        for (int i = 0; i < (max + len); i++)
        {
            //Console.WriteLine(starts[i]);
            accum += starts[i];
            count[i] = accum;
            //offset for duplicates
            if (starts[i] > 1)
            {
                extra += starts[i]*(starts[i]-1)/2;
            }
        }
        
        //fill in rest of circles
        for (int i = (max + len); i < range; i++)
        {
            count[i] = accum;
        }
        
        //add up intersections 
        for (int i = 0; i < len; i++)
        {
            intersections += 
            (count[A[i]+i+len] - count[A[i]-i+len] + 
            starts[(A[i]-i)+len] - 1);
        }
        
        intersections -= extra;
        
        if (intersections > 10000000)
        {
            return -1;
        }
        
        return intersections;
    }
}
